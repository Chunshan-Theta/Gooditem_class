# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Comment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    # comment_id,classN,teacherN,say,[major, midexam, endexam, value, cost, classcall, homework, classexam,posttime]
    def __init__(self, request_status: str='success', comment_id: int=None, object_type: str=None, class_name: str=None, teacher_name: str=None, user_memo: str=None,
                 major: str='N/A',midexam: int=0,endexam: int=0,classcall: int=0,homework: int=0, classexam: int=0,
                 value: str='N/A', cost: str='N/A'):  # noqa: E501
        """Comment - a model defined in Swagger

        :param request_status: The request_status of this Comment.  # noqa: E501
        :type request_status: str
        :param comment_id: The comment_id of this Comment.  # noqa: E501
        :type comment_id: int
        :param object_type: The object_type of this Comment.  # noqa: E501
        :type object_type: str
        :param class_name: The class_name of this Comment.  # noqa: E501
        :type class_name: str
        :param teacher_name: The teacher_name of this Comment.  # noqa: E501
        :type teacher_name: str
        :param user_memo: The user_memo of this Comment.  # noqa: E501
        :type user_memo: str
        """
        self.swagger_types = {
            'request_status': str,
            'comment_id': int,
            'object_type': str,
            'class_name': str,
            'teacher_name': str,
            'user_memo': str
        }

        self.attribute_map = {
            'request_status': 'request_status',
            'comment_id': 'comment_id',
            'object_type': 'object_type',
            'class_name': 'class_name',
            'teacher_name': 'teacher_name',
            'user_memo': 'user_memo',
            'major': 'major'
        }
        self._request_status = request_status
        self._comment_id = comment_id
        self._object_type = object_type
        self._class_name = class_name
        self._teacher_name = teacher_name
        self._user_memo = user_memo
        self._major = major
        self.midexam = midexam
        self.endexam = endexam
        self.value = value
        self.cost = cost
        self.classcall = classcall
        self.homework = homework
        self.classexam = classexam

    def to_dict(self):
        return {
            "request_status" : self.request_status,
            "comment_id" : self.comment_id,
            "object_type" : self.object_type,
            "class_name" : self.class_name,
            "teacher_name" : self.teacher_name,
            "user_memo" : self.user_memo,
            "major" : self._major,
            "midexam" : self.midexam,
            "endexam" : self.endexam,
            "value" : self.value,
            "cost" : self.cost,
            "classcall" : self.classcall,
            "homework" : self.homework,
            "classexam" : self.classexam,
        }

    @classmethod
    def from_dict(cls, dikt) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The comment of this Comment.  # noqa: E501
        :rtype: Comment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_status(self) -> str:
        """Gets the request_status of this Comment.


        :return: The request_status of this Comment.
        :rtype: str
        """
        return self._request_status

    @request_status.setter
    def request_status(self, request_status: str):
        """Sets the request_status of this Comment.


        :param request_status: The request_status of this Comment.
        :type request_status: str
        """
        allowed_values = ["success", "error", "warring"]  # noqa: E501
        if request_status not in allowed_values:
            raise ValueError(
                "Invalid value for `request_status` ({0}), must be one of {1}"
                .format(request_status, allowed_values)
            )

        self._request_status = request_status

    @property
    def comment_id(self) -> int:
        """Gets the comment_id of this Comment.


        :return: The comment_id of this Comment.
        :rtype: int
        """
        return self._comment_id

    @comment_id.setter
    def comment_id(self, comment_id: int):
        """Sets the comment_id of this Comment.


        :param comment_id: The comment_id of this Comment.
        :type comment_id: int
        """
        if comment_id is None:
            raise ValueError("Invalid value for `comment_id`, must not be `None`")  # noqa: E501

        self._comment_id = comment_id

    @property
    def object_type(self) -> str:
        """Gets the object_type of this Comment.


        :return: The object_type of this Comment.
        :rtype: str
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type: str):
        """Sets the object_type of this Comment.


        :param object_type: The object_type of this Comment.
        :type object_type: str
        """
        allowed_values = ["normal", "banned"]  # noqa: E501
        if object_type not in allowed_values:
            raise ValueError(
                "Invalid value for `object_type` ({0}), must be one of {1}"
                .format(object_type, allowed_values)
            )

        self._object_type = object_type

    @property
    def class_name(self) -> str:
        """Gets the class_name of this Comment.


        :return: The class_name of this Comment.
        :rtype: str
        """
        return self._class_name

    @class_name.setter
    def class_name(self, class_name: str):
        """Sets the class_name of this Comment.


        :param class_name: The class_name of this Comment.
        :type class_name: str
        """
        if class_name is None:
            raise ValueError("Invalid value for `class_name`, must not be `None`")  # noqa: E501

        self._class_name = class_name

    @property
    def teacher_name(self) -> str:
        """Gets the teacher_name of this Comment.


        :return: The teacher_name of this Comment.
        :rtype: str
        """
        return self._teacher_name

    @teacher_name.setter
    def teacher_name(self, teacher_name: str):
        """Sets the teacher_name of this Comment.


        :param teacher_name: The teacher_name of this Comment.
        :type teacher_name: str
        """
        if teacher_name is None:
            raise ValueError("Invalid value for `teacher_name`, must not be `None`")  # noqa: E501

        self._teacher_name = teacher_name

    @property
    def user_memo(self) -> str:
        """Gets the user_memo of this Comment.


        :return: The user_memo of this Comment.
        :rtype: str
        """
        return self._user_memo

    @user_memo.setter
    def user_memo(self, user_memo: str):
        """Sets the user_memo of this Comment.


        :param user_memo: The user_memo of this Comment.
        :type user_memo: str
        """
        if user_memo is None:
            raise ValueError("Invalid value for `user_memo`, must not be `None`")  # noqa: E501

        self._user_memo = user_memo
